services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - '${DB_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - gazette-network
    healthcheck:
      test: [CMD-SHELL, 'pg_isready -U ${DB_USER} -d ${DB_NAME}']
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    env_file:
      - .env
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      NODE_ENV: ${NODE_ENV}
      PORT: ${BACKEND_PORT}
      JWT_SECRET: ${JWT_SECRET}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:${FRONTEND_PORT:-3002},http://frontend:${FRONTEND_PORT:-3002}}
    ports:
      - '${BACKEND_PORT}:${BACKEND_PORT}'
    volumes:
      - ./apps/backend:/app/apps/backend
      - ./packages:/app/packages
      - ./package.json:/app/package.json
      - ./pnpm-workspace.yaml:/app/pnpm-workspace.yaml
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - gazette-network

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - gazette-network
    depends_on:
      - postgres

networks:
  gazette-network:
    driver: bridge

volumes:
  postgres_data:
