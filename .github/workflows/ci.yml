name: CI

on:
  push:
    branches:
      - main
      - staging
      - dev
      - branche-de-france
  pull_request:
    branches:
      - main
      - staging
      - dev
      - branche-de-france

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.15.0

      - name: Setup pnpm
        run: npm install -g pnpm@10.11.0

      - name: Install dependencies
        run: pnpm install

      - name: Run ESLint
        run: pnpm lint

  typecheck:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.15.0

      - name: Setup pnpm
        run: npm install -g pnpm@10.11.0

      - name: Install dependencies
        run: pnpm install

      - name: Run TypeScript typecheck
        run: pnpm -r run typecheck

  build:
    needs: typecheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.15.0

      - name: Setup pnpm
        run: npm install -g pnpm@10.11.0

      - name: Install dependencies
        run: pnpm install

      - name: Build packages
        env:
          NODE_ENV: production
          CI: true
        run: pnpm -r build

  lighthouse:
    name: Lighthouse Accessibility Audit
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.15.0

      - name: Setup pnpm
        run: npm install -g pnpm@10.11.0

      - name: Install dependencies
        run: pnpm install

      - name: Install Lighthouse and Puppeteer
        run: |
          pnpm add -w lighthouse puppeteer wait-on

      - name: Build shared package
        run: |
          pnpm --filter @gazette/shared build

      - name: Create .env file for CI
        run: |
          cat > .env << EOF
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_PORT=${{ secrets.DB_PORT }}
          BACKEND_PORT=${{ secrets.BACKEND_PORT }}
          NODE_ENV=test
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
          ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}
          FRONTEND_PORT=${{ secrets.FRONTEND_PORT }}
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          EOF

      - name: Start Docker services
        run: |
          echo "Starting postgres..."
          docker compose up -d postgres
          sleep 10
          echo "Starting backend..."
          docker compose up -d backend
          sleep 5
          echo "Starting frontend..."
          docker compose up -d frontend

      - name: Check Docker services status
        run: |
          echo "=== Docker services status ==="
          docker compose ps
          echo "=== Ports listening ==="
          netstat -tlnp || ss -tlnp
          echo "=== Docker logs backend ==="
          docker compose logs backend --tail=20
          echo "=== Docker logs frontend ==="
          docker compose logs frontend --tail=20

      - name: Wait for services to be ready
        run: |
          echo "Waiting 10 seconds for services to fully start..."
          sleep 10
          echo "Checking if backend is listening on port 3000..."
          curl -f http://localhost:3000/ || echo "Backend not ready yet"
          echo "Waiting for backend on port 3000..."
          npx wait-on tcp:localhost:3000 --timeout 60000 # 1 minute
          echo "Backend is ready!"
          echo "Waiting for frontend on port 3002..."
          npx wait-on tcp:localhost:3002 --timeout 60000 # 1 minute
          echo "Frontend is ready!"

      - name: Run Lighthouse authentication script
        run: node .github/scripts/lighthouse-auth.js

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: ./lighthouse-report-*.html
