name: CI

on:
  push:
    branches:
      - main
      - staging
      - dev
      - branche-de-france
  pull_request:
    branches:
      - main
      - staging
      - dev
      - branche-de-france

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.15.0

      - name: Setup pnpm
        run: npm install -g pnpm@10.11.0

      - name: Install dependencies
        run: pnpm install

      - name: Run ESLint
        run: pnpm lint

  typecheck:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.15.0

      - name: Setup pnpm
        run: npm install -g pnpm@10.11.0

      - name: Install dependencies
        run: pnpm install

      - name: Run TypeScript typecheck
        run: pnpm -r run typecheck

  build:
    needs: typecheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.15.0

      - name: Setup pnpm
        run: npm install -g pnpm@10.11.0

      - name: Install dependencies
        run: pnpm install

      - name: Build packages
        env:
          NODE_ENV: production
          CI: true
        run: pnpm -r build

  lighthouse:
    name: Lighthouse Accessibility Audit
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.15.0

      - name: Setup pnpm
        run: npm install -g pnpm@10.11.0

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          pnpm install
          echo "Building shared packages..."
          pnpm --filter @gazette/shared build

      - name: Create .env file for CI
        run: |
          cat > .env << EOF
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_PORT=${{ secrets.DB_PORT }}
          BACKEND_PORT=${{ secrets.BACKEND_PORT }}
          NODE_ENV=test
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
          ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}
          FRONTEND_PORT=${{ secrets.FRONTEND_PORT }}
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          EOF
          echo "Created .env file (values hidden for security)"
          echo "Checking if all required secrets are set..."
          if [ -z "${{ secrets.DB_USER }}" ] || [ -z "${{ secrets.BACKEND_PORT }}" ] || [ -z "${{ secrets.FRONTEND_PORT }}" ]; then
            echo "❌ Missing required secrets!"
            exit 1
          fi
          echo "✅ All required secrets are set"

      - name: Start Docker services
        run: |
          echo "=== Starting Docker services ==="
          echo "Stopping any existing containers..."
          docker compose down --volumes --remove-orphans

          echo "Removing any existing images..."
          docker compose rm -f
          docker rmi gazette-frontend gazette-backend || echo "No images to remove"

          echo "Building and starting all services..."
          docker compose up --build -d

          echo "=== Waiting for services to start ==="
          echo "Waiting 60 seconds for services to fully start..."
          sleep 60

          echo "=== Container Status Check ==="
          echo "All containers status:"
          docker compose ps -a

          echo "=== Container Health Check ==="
          echo "Checking if containers are running..."
          if ! docker compose ps --status running | grep -q "frontend\|backend"; then
            echo "❌ Some containers are not running!"
            echo "Container logs:"
            docker compose logs --tail=50
            echo "❌ Exiting due to container startup failure"
            exit 1
          fi

          echo "✅ All containers are running!"

          echo "=== Network Configuration ==="
          echo "Docker networks:"
          docker network ls
          echo "Gazette network details:"
          docker network inspect gazette_gazette-network || echo "Network not found"

          echo "=== Port Mappings ==="
          echo "Frontend port mapping:"
          docker compose port frontend ${{ secrets.FRONTEND_PORT }} || echo "❌ Frontend port mapping failed"
          echo "Backend port mapping:"
          docker compose port backend ${{ secrets.BACKEND_PORT }} || echo "❌ Backend port mapping failed"

          echo "=== Service Accessibility ==="
          echo "Testing backend accessibility..."
          for i in {1..15}; do
            echo "Attempt $i/15 to connect to backend on port ${{ secrets.BACKEND_PORT }}..."
            if curl -f -s http://localhost:${{ secrets.BACKEND_PORT }}/ > /dev/null 2>&1; then
              echo "✅ Backend is accessible!"
              break
            fi
            if [ $i -eq 15 ]; then
              echo "❌ Backend is not accessible after 15 attempts"
              echo "Backend logs:"
              docker compose logs backend --tail=30
              exit 1
            fi
            sleep 5
          done

          echo "Testing frontend accessibility..."
          for i in {1..15}; do
            echo "Attempt $i/15 to connect to frontend on port ${{ secrets.FRONTEND_PORT }}..."
            if curl -f -s http://localhost:${{ secrets.FRONTEND_PORT }}/ > /dev/null 2>&1; then
              echo "✅ Frontend is accessible!"
              break
            fi
            if [ $i -eq 15 ]; then
              echo "❌ Frontend is not accessible after 15 attempts"
              echo "Frontend logs:"
              docker compose logs frontend --tail=30
              exit 1
            fi
            sleep 5
          done

          echo "✅ All services are accessible!"

      - name: Run Lighthouse CI
        env:
          FRONTEND_PORT: ${{ secrets.FRONTEND_PORT }}
        run: |
          echo "Installing Lighthouse CLI..."
          npm install -g @lhci/cli@0.15.x

          echo "Running Lighthouse with localhost..."
          lhci collect --url=http://localhost:${{ secrets.FRONTEND_PORT }}/
          lhci upload --target=temporary-public-storage
